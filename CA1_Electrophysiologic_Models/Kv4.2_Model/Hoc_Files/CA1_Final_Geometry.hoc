//Principale différence : ajout de cadifus


/*Pour obtenir les mêmes résultats que la figure 1.B de l'article de U.S Bhalla 
(Multiscale interactions between chemical and electric signaling in LTP induction,
 LTP reversal and dendritic excitability), injecter un courant de 1nA, pendant 200ms, à soma(0).*/

load_file("nrngui.hoc")
load_file("all_tau_vecs.hoc")
//load_file("NMDA.hoc")

//load_file("ca1_cell.ses")

/*	Correspondances entre les fichiers 
	basal[0] = basal_3	basal[1] = basal_5	basal[2] = basal_6	basal[3] = basal_8
	
	apical[0] = apical_10	apical[1] = apical_11	apical[2] = apical_12	apical[3] = apical_13
	apical[4] = apical_14	apical[5] = apical_15	apical[6] = apical_16	apical[7] = apical_17
	apical[8] = apical_18	apical[9] = apical_19
	
	lateral[0] = lat_11_1	lateral[1] = lat_11_2	lateral[2] = lat_11_3	lateral[3] = lat_11_4
	lateral[4] = lat_13_1	lateral[5] = lat_13_2	lateral[6] = lat_14_1	lateral[7] = lat_14_2
	lateral[8] = lat_14_3	lateral[9] = lat_14_10	lateral[10] = lat_15_1	lateral[11] = lat_15_2
	
	spine[0] = spine_neck_14_1	spine[1] = spine_head_14_1	
	spine[2] = spine_neck_14_2	spine[3] = spine_head_14_2	
	spine[4] = spine_neck_14_10	spine[5] = spine_head_14_10
	
	*/
forall delete_section()
create soma,  basal[4], apical[10], lateral[30], spine[8]

/*Géométries + Canaux ioniques*/

//paramètres généraux
forall{
	Ra = 100
	insert capacitance { cm=3}
	insert pas { g_pas=0.0001 e_pas=-60}
}

test_const = 0.04 //constante qui agit sur le beta pour influencer la réponse calcique conformément
 					//à celle de Bhalla. 

//soma
soma {
	diam=8.46
	L=125
	nseg = 1
	insert cadifus
 	insert na_Bh
 	insert ca_debug_Bh
 	insert k_dr_Bh
 	insert k_ahp_Bh
 	insert k_c_Bh
 	insert k_a_Bh
 	soma.beta_cadifus = ( 2e-8 / (FARADAY*1e6*soma.diam*1e-18)) * test_const
 	soma.gna_na_Bh = 0.03
 	soma.gca_ca_debug_Bh = 0.004
 	soma.gk_k_dr_Bh = 0.025
 	soma.gk_k_ahp_Bh = 0.0008
 	soma.gk_k_c_Bh = 0.01
 	soma.gk_k_a_Bh = 0.0015 //bhalla values 0.005 value used 0.0015
 	soma.phi_cadifus = 0.075
 	soma.kf_rasGDP_cadifus = 0
 	
 	insert kaf
 	soma.gkbar_kaf = 0.019211
 	
 	}

//basal compartiments
basal[0] { 
	diam=3.84
	L=220
	nseg = 1
	insert cadifus
 	insert ca_debug_Bh
 	insert k_ahp_Bh
 	insert k_c_Bh
 	basal[0].beta_cadifus = ( 2e-8 / (FARADAY*1e6*basal[0].diam*1e-18)) * test_const
 	basal[0].gca_ca_debug_Bh = 0.005
 	basal[0].gk_k_ahp_Bh = 0.0008
 	basal[0].gk_k_c_Bh = 0.005
 	basal[0].phi_cadifus = 0.075
 	basal[0].kf_rasGDP_cadifus = 0
 	insert kaf

 	}

basal[1] {
	diam=3.84
	L=220 
	nseg = 1
	insert cadifus
 	insert ca_debug_Bh
 	insert k_ahp_Bh
 	insert k_c_Bh
 	basal[1].beta_cadifus = ( 2e-8 / (FARADAY*1e6*basal[1].diam*1e-18)) * test_const
 	basal[1].gca_ca_debug_Bh = 0.007
 	basal[1].gk_k_ahp_Bh = 0.0008
 	basal[1].gk_k_c_Bh = 0.005
 	basal[1].phi_cadifus = 0.075
 	basal[1].kf_rasGDP_cadifus = 0
 	insert kaf

 	}

basal[2] {
	diam=3.84
	L=220 
	nseg = 1
	insert cadifus
 	insert na_Bh
 	insert ca_debug_Bh
 	insert k_dr_Bh
 	insert k_ahp_Bh
 	insert k_c_Bh
 	basal[2].beta_cadifus = ( 2e-8 / (FARADAY*1e6*basal[2].diam*1e-18)) * test_const
 	basal[2].gna_na_Bh = 0.02
 	basal[2].gca_ca_debug_Bh = 0.012
 	basal[2].gk_k_dr_Bh = 0.02
 	basal[2].gk_k_ahp_Bh = 0.0008
 	basal[2].gk_k_c_Bh = 0.01
 	basal[2].phi_cadifus = 0.075
 	basal[2].kf_rasGDP_cadifus = 0
 	insert kaf

 	}
 	
basal[3] { 
	diam=3.84
	L=110
	nseg = 1
	insert cadifus
 	insert na_Bh
 	insert ca_debug_Bh
 	insert k_dr_Bh
 	insert k_ahp_Bh
 	insert k_c_Bh
	basal[3].beta_cadifus = ( 2e-8 / (FARADAY*1e6*basal[3].diam*1e-18)) * test_const
 	basal[3].gna_na_Bh = 0.015
 	basal[3].gca_ca_debug_Bh = 0.008
 	basal[3].gk_k_dr_Bh = 0.01
 	basal[3].gk_k_ahp_Bh = 0.0008
 	basal[3].gk_k_c_Bh = 0.02
 	basal[3].phi_cadifus = 0.075
 	basal[3].kf_rasGDP_cadifus = 0
 	insert kaf

 	}	

//apical compartiments

for i=1,8{
	apical[i]{
		nseg = 1
		insert cadifus
 		insert ca_debug_Bh
 		insert k_dr_Bh
 		insert k_ahp_Bh
 		insert k_c_Bh
 		insert k_a_Bh
 		//insert nmda_current
 		
 		//volume6 = PI*diam/2*diam/2*L*1e-18
 		//var6 = (8.96e-3 / volume6) *1e-6 * area(.5) * 1e-8
		//apical[i].beta_cadifus = ( 2e-8 / (FARADAY*1e6*apical[i].diam*1e-18))
 		apical[i].gca_ca_debug_Bh = 0.007
 		apical[i].gk_k_dr_Bh = 0.006
 		apical[i].gk_k_ahp_Bh = 0.0008
 		apical[i].gk_k_c_Bh = 0.005
 		apical[i].gk_k_a_Bh = 0.004 //bhalla values 0.01 value used 0.004
 		
 		insert kaf
 		apical[i].gkbar_kaf = 0.019211
 		}
 	}
 	
 	apical[0]{
 		nseg = 1
		insert cadifus
 		insert na_Bh
 		insert ca_debug_Bh
 		insert k_dr_Bh
 		insert k_ahp_Bh
 		insert k_c_Bh
 		//insert nmda_current
 		
 		//var2 = 26.404e6 * area(.5) * 1e-8
 		//apical[0].beta_cadifus = ( 26.404e12 * (PI*diam/2*diam/2*L*1e-18) * 1e-6)
 		apical[0].beta_cadifus = ( 2e-8 / (FARADAY*1e6*apical[0].diam*1e-18)) * test_const
 		apical[0].gna_na_Bh = 0.015
 		apical[0].gca_ca_debug_Bh = 0.008
 		apical[0].gk_k_dr_Bh = 0.01
 		apical[0].gk_k_ahp_Bh = 0.0008
 		apical[0].gk_k_c_Bh = 0.02
 		apical[0].phi_cadifus = 0.075
 		apical[0].kf_rasGDP_cadifus = 0
 		insert kaf
 		apical[0].gkbar_kaf = 0.019211

 		}
 		
 	apical[1]{
 		insert na_Bh
 		apical[1].gna_na_Bh = 0.008
 		}
 	apical[2]{
 		insert na_Bh
 		apical[2].gna_na_Bh = 0.006
 		}
 	apical[3]{
 		insert na_Bh
 		apical[3].gna_na_Bh = 0.005
 		}
for i=4,8{
 	apical[i]{
 		insert na_Bh
 		apical[i].gna_na_Bh = 0.004
 		}
 	}
 	
 	apical[9]{
	nseg = 1
	}	

for i=0,9{
	apical[i] {L = 120}
	}
	
	apical[0] {diam = 4}
	apical[1] {diam = 3}
	apical[2] {diam = 3}
for i = 3,9{
	apical[i] {diam = 2.6}
	}

apical[1].beta_cadifus = ( 2e-8 / (FARADAY*1e6*apical[1].diam*1e-18)) * test_const
apical[1].phi_cadifus = 0.075
apical[1].kf_rasGDP_cadifus = 0

apical[2].beta_cadifus = ( 2e-8 / (FARADAY*1e6*apical[2].diam*1e-18)) * test_const
apical[2].phi_cadifus = 0.075
apical[2].kf_rasGDP_cadifus = 0

apical[3].beta_cadifus = ( 2e-8 / (FARADAY*1e6*apical[3].diam*1e-18)) * test_const
apical[3].phi_cadifus = 0.075
apical[3].kf_rasGDP_cadifus = 0

apical[4].beta_cadifus = ( 2e-8 / (FARADAY*1e6*apical[4].diam*1e-18)) * test_const
apical[4].phi_cadifus = 0.075
apical[4].kf_rasGDP_cadifus = 0

apical[5].beta_cadifus = ( 2e-8 / (FARADAY*1e6*apical[5].diam*1e-18)) * test_const
apical[5].phi_cadifus = 0.075
apical[5].kf_rasGDP_cadifus = 0

apical[6].beta_cadifus = ( 2e-8 / (FARADAY*1e6*apical[6].diam*1e-18)) * test_const
apical[6].phi_cadifus = 0.075
apical[6].kf_rasGDP_cadifus = 0

apical[7].beta_cadifus = ( 2e-8 / (FARADAY*1e6*apical[7].diam*1e-18)) * test_const
apical[7].phi_cadifus = 0.075
apical[7].kf_rasGDP_cadifus = 0

apical[8].beta_cadifus = ( 2e-8 / (FARADAY*1e6*apical[8].diam*1e-18)) * test_const
apical[8].phi_cadifus = 0.075
apical[8].kf_rasGDP_cadifus = 0

	
//lateral compartiments

for i=0,29{
	lateral[i]{
		nseg = 1
		insert ca_debug_Bh
	 	insert k_ahp_Bh
	 	insert k_c_Bh
	 	insert k_dr_Bh
	 	insert k_a_Bh
	 	//insert nmda_current
	 	lateral[i].gca_ca_debug_Bh = 0.007
	 	lateral[i].gk_k_ahp_Bh = 0.0008
 	 	lateral[i].gk_k_c_Bh = 0.005
 	 	lateral[i].gk_k_dr_Bh = 0.006
 	 	lateral[i].gk_k_a_Bh = 0.004 //bhalla values 0.01 value used 0.004
 	 	
 	 	insert kaf
 	 	lateral[i].gkbar_kaf = 0.019211
 	 	}
 	 }
 	 
 	lateral[0]{
 	 	insert na_Bh
 		lateral[0].gna_na_Bh = 0.008
 		}
 	
for i=1,29{
 	lateral[i]{
 		insert na_Bh
 		lateral[i].gna_na_Bh = 0.004
 		}
 	}

	
	lateral[0] {L=85 insert cadifus}

	lateral[1] {L=85 insert cadifus}

	lateral[2] {L=80 insert cadifus}

	lateral[3] {L=80 insert cadifus}

	lateral[4] {L=57 insert cadifus} //dans suplementary data c'est 57 mis ca1.p 56.6

	lateral[5] {L=57 insert cadifus} //dans suplementary data c'est 57 mis ca1.p 56.6

	lateral[6] {L=1 insert cadifus} //lateral[6] devient les 3 suivants
	lateral[7] {L=1 insert cadifus} 
	lateral[8] {L=1 insert cadifus} 
	
	lateral[9] {L=1 insert cadifus} 
	lateral[10] {L=1 insert cadifus} // connect to spine [1] new compartments: old lateral[6] split in 3: L=4;3;3
	lateral[11] {L=1 insert cadifus} //connect to spine [7] new one
	lateral[12] {L=1 insert cadifus}
	
	lateral[13] {L=1 insert cadifus}
	lateral[14] {L=1 insert cadifus}
	lateral[15] {L=1 insert cadifus}
	
	lateral[16] {L=1 insert cadifus}	
	lateral[17] {L=1 insert cadifus}
	lateral[18] {L=1 insert cadifus}
	lateral[19] {L=1 insert cadifus}
	lateral[20] {L=1 insert cadifus} // connect to spine [3] former bhalla 2nd spine
	lateral[21] {L=1 insert cadifus}
	lateral[22] {L=1 insert cadifus}
	lateral[23] {L=1 insert cadifus}
	lateral[24] {L=1 insert cadifus}
	lateral[25] {L=1 insert cadifus}
	
	lateral[26] {L=70 insert cadifus}
	
	lateral[27] {L=30 insert cadifus}
	
	lateral[28] {L=60 insert cadifus}
	
	lateral[29] {L=60 insert cadifus}

	
	lateral[0] {diam=2}
	lateral[1] {diam=1.8}
	lateral[2] {diam=1.5}
	lateral[3] {diam=1.5}
for i=4,29{
	lateral[i] {diam=1}
	}
	
lateral[0].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[0].diam*1e-18)) * test_const
	lateral[0].phi_cadifus = 0.075
 	lateral[0].kf_rasGDP_cadifus = 0

lateral[1].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[1].diam*1e-18)) * test_const
	lateral[1].phi_cadifus = 0.075
 	lateral[1].kf_rasGDP_cadifus = 0

lateral[2].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[2].diam*1e-18)) * test_const
	lateral[2].phi_cadifus = 0.075
 	lateral[2].kf_rasGDP_cadifus = 0

lateral[3].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[3].diam*1e-18)) * test_const
	lateral[3].phi_cadifus = 0.075
 	lateral[3].kf_rasGDP_cadifus = 0

lateral[4].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[4].diam*1e-18)) * test_const
	lateral[4].phi_cadifus = 0.075
 	lateral[4].kf_rasGDP_cadifus = 0

lateral[5].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[5].diam*1e-18)) * test_const
	lateral[5].phi_cadifus = 0.075
 	lateral[5].kf_rasGDP_cadifus = 0

lateral[6].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[6].diam*1e-18)) * test_const
	lateral[6].phi_cadifus = 0.075
 	lateral[6].kf_rasGDP_cadifus = 0

lateral[7].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[7].diam*1e-18)) * test_const
	lateral[7].phi_cadifus = 0.075
 	lateral[7].kf_rasGDP_cadifus = 0

lateral[8].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[8].diam*1e-18)) * test_const
	lateral[8].phi_cadifus = 0.075
 	lateral[8].kf_rasGDP_cadifus = 0

lateral[9].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[9].diam*1e-18)) * test_const
	lateral[9].phi_cadifus = 0.075
 	lateral[9].kf_rasGDP_cadifus = 0
 
lateral[10].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[10].diam*1e-18)) * test_const
	lateral[10].phi_cadifus = 0.075
 	lateral[10].kf_rasGDP_cadifus = 0

lateral[11].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[11].phi_cadifus = 0.075
	lateral[11].kf_rasGDP_cadifus = 0

lateral[12].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[12].phi_cadifus = 0.075
	lateral[12].kf_rasGDP_cadifus = 0

lateral[13].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[13].phi_cadifus = 0.075
	lateral[13].kf_rasGDP_cadifus = 0

lateral[14].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[14].phi_cadifus = 0.075
	lateral[14].kf_rasGDP_cadifus = 0

lateral[15].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[15].phi_cadifus = 0.075
	lateral[15].kf_rasGDP_cadifus = 0

lateral[16].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[16].phi_cadifus = 0.075
	lateral[16].kf_rasGDP_cadifus = 0

lateral[17].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[17].phi_cadifus = 0.075
	lateral[17].kf_rasGDP_cadifus = 0

lateral[18].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[18].phi_cadifus = 0.075
	lateral[18].kf_rasGDP_cadifus = 0

lateral[19].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[19].phi_cadifus = 0.075
	lateral[19].kf_rasGDP_cadifus = 0

lateral[20].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[20].phi_cadifus = 0.075
	lateral[20].kf_rasGDP_cadifus = 0

lateral[21].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[21].phi_cadifus = 0.075
	lateral[21].kf_rasGDP_cadifus = 0

lateral[22].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[22].phi_cadifus = 0.075
	lateral[22].kf_rasGDP_cadifus = 0

lateral[23].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[23].phi_cadifus = 0.075
	lateral[23].kf_rasGDP_cadifus = 0

lateral[24].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[24].phi_cadifus = 0.075
	lateral[24].kf_rasGDP_cadifus = 0

lateral[25].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[25].phi_cadifus = 0.075
	lateral[25].kf_rasGDP_cadifus = 0

lateral[26].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[26].phi_cadifus = 0.075
	lateral[26].kf_rasGDP_cadifus = 0

lateral[27].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[27].phi_cadifus = 0.075
	lateral[27].kf_rasGDP_cadifus = 0

lateral[28].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[28].phi_cadifus = 0.075
	lateral[28].kf_rasGDP_cadifus = 0

lateral[29].beta_cadifus = ( 2e-8 / (FARADAY*1e6*lateral[11].diam*1e-18)) * test_const
	lateral[29].phi_cadifus = 0.075
	lateral[29].kf_rasGDP_cadifus = 0

//enlever toute activation des autres epines aussi a part l epine 1 (a essayer) .kf_rasGDP_cadifus = 0
	
// spine
spine[1]{
	nseg = 1
	diam = 0.5
	insert ca_debug_Bh
	//insert nmda_current
	//insert nmda_ca_current
	spine[1].gca_ca_debug_Bh = 0.006 //bhalla values 0.006 //values used previously 0.06
	insert cadifus	
	insert kaf
	spine[1].gkbar_kaf = 0.019211
	
	//spine[1].coeff1_kaf = 0.51
	//spine[1].coeff2_kaf = 0.49 //temp values for test on kv42
	
	//spine[1].kf_rasGDP_cadifus = 0
	}
spine[1].beta_cadifus = ( 2e-8 / (FARADAY*1e6*spine[1].diam*1e-18)) * test_const


spine[3]{
	nseg = 1
	diam = 0.5
	insert ca_debug_Bh
	//insert nmda_current
	//insert nmda_ca_current
	spine[3].gca_ca_debug_Bh = 0.006 //bhalla values 0.006 //values used previously 0.06
	 insert cadifus
	 insert kaf
	 spine[3].gkbar_kaf = 0.01921
	//spine[3].kf_rasGDP_cadifus = 0
	}
spine[3].beta_cadifus = ( 2e-8 / (FARADAY*1e6*spine[3].diam*1e-18)) * test_const
	
	
spine[5]{
	nseg = 1
	diam = 0.5
	insert ca_debug_Bh
	//insert nmda_current
	//insert nmda_ca_current
	spine[5].gca_ca_debug_Bh = 0.006 //bhalla values 0.006 //values used previously 0.06
	insert cadifus
	insert kaf
	spine[5].gkbar_kaf = 0.01921
	//spine[5].kf_rasGDP_cadifus = 0
	}
spine[5].beta_cadifus = ( 2e-8 / (FARADAY*1e6*spine[5].diam*1e-18)) * test_const

spine[7]{
	nseg = 1
	diam = 0.5
	insert ca_debug_Bh
	//insert nmda_current
	//insert nmda_ca_current
	spine[7].gca_ca_debug_Bh = 0.006 //bhalla values 0.006 //values used previously 0.06
	insert cadifus
	insert kaf
	spine[7].gkbar_kaf = 0.01921
	//spine[7].kf_rasGDP_cadifus = 0
	}
spine[7].beta_cadifus = ( 2e-8 / (FARADAY*1e6*spine[5].diam*1e-18)) * test_const

for i=0,7{
	spine[i] {L=0.5}
	}

	spine[0] {diam=0.1	 
	insert cadifus
	insert kaf
	spine[0].gkbar_kaf = 0.01921
	//spine[0].kf_rasGDP_cadifus = 0
	}
spine[0].beta_cadifus = 0

	spine[2] {diam=0.1	 
	insert cadifus
	insert kaf
	spine[2].gkbar_kaf = 0.01921
	//spine[2].kf_rasGDP_cadifus = 0
	}
spine[2].beta_cadifus = 0

	spine[4] {diam=0.1	 
	insert cadifus
	insert kaf
	spine[4].gkbar_kaf = 0.01921
	//spine[4].kf_rasGDP_cadifus = 0
	}
spine[4].beta_cadifus = 0

	spine[6] {diam=0.1	 
	insert cadifus
	insert kaf
	spine[6].gkbar_kaf = 0.0192
	//spine[6].kf_rasGDP_cadifus = 0
	}
spine[6].beta_cadifus = 0
//////////////////////////////////////////////
//Connecter les compartiments

/*connect fils(), parent()*/

//soma est la racine :0 end(left) at the origin; 1 end(right) 
//apical[0]: 0 end(left) at the origin; 1 end(right) >> sections get drawn from left to right
//basal[3]: 1 end(left) at the origin; 0 end(right) >> sections get drawn from right to left

//Begin, at the right of the soma
connect apical[0](0), soma(1)
connect apical[1](0), apical[0](1)
connect apical[2](0), apical[1](1)
connect apical[3](0), apical[2](1)
connect apical[4](0), apical[3](1)
connect apical[5](0), apical[4](1)
connect apical[6](0), apical[5](1)
connect apical[7](0), apical[6](1)
connect apical[8](0), apical[7](1)
connect apical[9](0), apical[8](1)

//End, at the left of the soma
connect basal[3](0), soma(0)
connect basal[2](0), basal[3](1)
connect basal[1](0), basal[2](1)
connect basal[0](0), basal[1](1)

//lateral connection
connect lateral[0](0), apical[0](0.5)
connect lateral[1](0), lateral[0](1)
connect lateral[2](0), lateral[1](1)
connect lateral[3](0), lateral[2](1)

connect lateral[4](0), apical[2](0.5)
connect lateral[5](0), lateral[4](1)
connect lateral[6](0), lateral[5](1)
connect lateral[7](0), lateral[6](1)
connect lateral[8](0), lateral[7](1)
connect lateral[9](0), lateral[8](1)
connect lateral[10](0), lateral[9](1)
connect lateral[11](0), lateral[10](1)
connect lateral[12](0), lateral[11](1)
connect lateral[13](0), lateral[12](1)
connect lateral[14](0), lateral[13](1)
connect lateral[15](0), lateral[14](1)
connect lateral[16](0), lateral[15](1)
connect lateral[17](0), lateral[16](1)
connect lateral[18](0), lateral[17](1)
connect lateral[19](0), lateral[18](1)
connect lateral[20](0), lateral[19](1)
connect lateral[21](0), lateral[20](1)
connect lateral[22](0), lateral[21](1)
connect lateral[23](0), lateral[22](1)
connect lateral[24](0), lateral[23](1)
connect lateral[25](0), lateral[24](1)
connect lateral[26](0), lateral[25](1)
connect lateral[27](0), lateral[26](1)
connect lateral[28](0), lateral[27](1)
connect lateral[29](0), lateral[28](1)

//spine connection

//new spine
connect spine[6](0), lateral[11](0.5)
connect spine[7](0), spine[6](1)

connect spine[0](0), lateral[10](0.5)
connect spine[1](0), spine[0](1)

connect spine[2](0), lateral[20](0.5)
connect spine[3](0), spine[2](1)

connect spine[4](0), lateral[18](0.5)
connect spine[5](0), spine[4](1)


//show topology
/*
objref s
s = new Shape()
s.show(0)
soma s.color(2)
topology()
finitialize()


//creation de la sous-section pour l'insertion des point-process
objref sl
sl = new SectionList()

for i=0,8{
	access apical[i]{ sl.append() }
	}
for i=0,11{
	access lateral[i]{sl.append() }
	}
for i=1,1{	
	access spine[i]{sl.append() }
	}
for i=3,3{	
	access spine[i]{sl.append() }
	}
for i=5,5{	
	access spine[i]{sl.append() }
	}
//sl.printnames()*/
	
//Variables pour l'affichage de graphe et de la fenêtre principale d'initialisation
objectvar save_window_, rvp_
objectvar scene_vector_[9]
objectvar ocbox_, ocbox_list_, scene_, scene_list_
{ocbox_list_ = new List()  scene_list_ = new List()}
{pwman_place(0,0,0)}
{
xpanel("RunControl", 0)
v_init = -60
xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
runStopAt = 5
xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
runStopIn = 1
xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
xbutton("Single Step","steprun()")
t = 0
xvalue("t","t", 2 )
tstop = 1e+06
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 0.025
xvalue("dt","dt", 1,"setdt()", 0, 1 )
steps_per_ms = 40
xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
screen_update_invl = 0.5
xvalue("Scrn update invl","screen_update_invl", 1,"", 0, 1 )
realtime = 0
xvalue("Real Time","realtime", 0,"", 0, 1 )
xpanel(10,101)
}
{
save_window_ = new Graph(0)
save_window_.size(0,600000,0,1)
scene_vector_[2] = save_window_
{save_window_.view(0, 0, 600000, 1, 371, 0, 522.24, 337.6)}
graphList[2].append(save_window_)
save_window_.save_name("graphList[2].")
save_window_.addvar("spine[1].RasGTPi( 0.5 )", 1, 1, 0.8, 0.9, 2)
save_window_.addexpr("spine[3].RasGTPi( 0.5 )", 2, 1, 0.8, 0.9, 2)
save_window_.addexpr("spine[7].RasGTPi( 0.5 )", 3, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[10].RasGTPi( 0.5 )", 4, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[11].RasGTPi( 0.5 )", 5, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[15].RasGTPi( 0.5 )", 6, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[18].RasGTPi( 0.5 )", 7, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[20].RasGTPi( 0.5 )", 8, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[23].RasGTPi( 0.5 )", 9, 1, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(0,600000,0,1)
scene_vector_[3] = save_window_
{save_window_.view(0, 0, 600000, 1, 922, 0, 550.08, 338.56)}
graphList[2].append(save_window_)
save_window_.save_name("graphList[2].")
save_window_.addvar("spine[1].RafPi( 0.5 )", 1, 1, 0.8, 0.9, 2)
save_window_.addexpr("spine[3].RafPi( 0.5 )", 2, 1, 0.8, 0.9, 2)
save_window_.addexpr("spine[7].RafPi( 0.5 )", 3, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[10].RafPi( 0.5 )", 4, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[11].RafPi( 0.5 )", 5, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[15].RafPi( 0.5 )", 6, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[18].RafPi( 0.5 )", 7, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[20].RafPi( 0.5 )", 8, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[23].RafPi( 0.5 )", 9, 1, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(0,600000,0,1)
scene_vector_[4] = save_window_
{save_window_.view(0, 0, 600000, 1, 362, 402, 524.16, 335.68)}
graphList[2].append(save_window_)
save_window_.save_name("graphList[2].")
save_window_.addvar("spine[1].MekPP_cadifus( 0.5 )", 1, 1, 0.8, 0.9, 2)
save_window_.addexpr("spine[3].MekPP_cadifus( 0.5 )", 2, 1, 0.8, 0.9, 2)
save_window_.addexpr("spine[7].MekPP_cadifus( 0.5 )", 3, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[10].MekPP_cadifus( 0.5 )", 4, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[11].MekPP_cadifus( 0.5 )", 5, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[15].MekPP_cadifus( 0.5 )", 6, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[18].MekPP_cadifus( 0.5 )", 7, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[20].MekPP_cadifus( 0.5 )", 8, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[23].MekPP_cadifus( 0.5 )", 9, 1, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(0,600000,0,1)
scene_vector_[5] = save_window_
{save_window_.view(0, 0, 600000, 1, 924, 404, 552.96, 337.6)}
graphList[2].append(save_window_)
save_window_.save_name("graphList[2].")
save_window_.addvar("spine[1].MapkPP_cadifus( 0.5 )", 1, 1, 0.8, 0.9, 2)
save_window_.addexpr("spine[3].MapkPP_cadifus( 0.5 )", 2, 1, 0.8, 0.9, 2)
save_window_.addexpr("spine[7].MapkPP_cadifus( 0.5 )", 3, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[10].MapkPP_cadifus( 0.5 )", 4, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[11].MapkPP_cadifus( 0.5 )", 5, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[15].MapkPP_cadifus( 0.5 )", 6, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[18].MapkPP_cadifus( 0.5 )", 7, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[20].MapkPP_cadifus( 0.5 )", 8, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[23].MapkPP_cadifus( 0.5 )", 9, 1, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(0,600000,0,1)
scene_vector_[6] = save_window_
{save_window_.view(0, 0, 600000, 1, 13, 501, 300.48, 200.32)}
graphList[2].append(save_window_)
save_window_.save_name("graphList[2].")
save_window_.addvar("spine[1].cai( 0.5 )", 1, 1, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(0,600000,0,1)
scene_vector_[7] = save_window_
{save_window_.view(0, 0, 600000, 1, 52, 151, 300.48, 200.32)}
graphList[2].append(save_window_)
save_window_.save_name("graphList[2].")
save_window_.addvar("spine[1].v( 0.5 )", 1, 1, 0.8, 0.9, 2)
}
{
save_window_ = new Graph(0)
save_window_.size(0,1e+06,0,1)
scene_vector_[8] = save_window_
{save_window_.view(0, 0, 1e+06, 1, 7, 386, 549.12, 334.72)}
graphList[2].append(save_window_)
save_window_.save_name("graphList[2].")
save_window_.addvar("spine[1].KV42Pi( 0.5 )", 1, 1, 0.8, 0.9, 2)
save_window_.addexpr("spine[3].KV42Pi( 0.5 )", 2, 1, 0.8, 0.9, 2)
save_window_.addexpr("spine[7].KV42Pi( 0.5 )", 3, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[10].KV42Pi( 0.5 )", 4, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[11].KV42Pi( 0.5 )", 5, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[15].KV42Pi( 0.5 )", 6, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[18].KV42Pi( 0.5 )", 7, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[20].KV42Pi( 0.5 )", 8, 1, 0.8, 0.9, 2)
save_window_.addexpr("lateral[23].KV42Pi( 0.5 )", 9, 1, 0.8, 0.9, 2)
}
objectvar scene_vector_[1]
{doNotify()}



/*Stimulations : injections de courant; Modifié juste le stim.amp pour faire varier nos simulations selon
le modèle de Bhalla; Les différents cas sont les suivants: stim.amp = -1; stim.amp = -0.8; stim.amp = -0.6
stim.amp = -0.4; stim.amp = -0.2; stim.amp = 0; stim.amp = 0.2; stim.amp = 0.4; stim.amp = 0.6; stim.amp = 0.8; 
stim.amp = 1 */
/*Par rapport au fichier construit dans le shell, on obtient 3 pics et un début de 4eme avec 
input.dur = 200; si on augmente à input.dur = 250, on obtient les 4 pics. la courbe est similaire
mais il y a une légère différence dans les temps d'arrivées des PA.

Dépendemment de la série d'input que je veux j'obtiens un résultat. Rien ne précise dans bhalla ou il effectue son
input initial.!!!*/

/*Validation des nouveaux fichiers. :)*/
/*
objectvar input
soma input = new IClamp (0.5)
input.del = 100
input.dur = 200
input.amp = 1.6 
*/

/*running simmulation*/
//run()

/*Scenario: enlever les voltages ca channels pis voir comment les synapses agissent*/
